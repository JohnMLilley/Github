library(AppliedPredictiveModelling)
install.packages('AppliedPredictiveModelling')
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
summary(inTrain)
head(training)
summary(training)
featurePlot(x=training,y= training.CompressiveStrength, plot="pairs")
featurePlot(x=training,y= training$CompressiveStrength, plot="pairs")
featurePlot(x=training,y= training$CompressiveStrength, plot="pairs")
library(Hmisc)
cutCement <- cut2(training$Cement,g=4)
table(cutCement)
p1 <- qplot(cutCement,CompressiveStrength, data=training,fill=cutCement, geom=c("boxplot"))
p1
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,colour=cutCement)
qplot(CompressiveStrength,color=cutCement,data=training)
summary(training)
cutCement <- cut2(training$Cement,g=5)
cutAge <-cut2(training$Age,g=5)
cutBlastFurnaceSlag <- cut2(training$BlastFurnaceSlag,g=5)
cutFlyAsh <- cut2(training$FlyAsh,g=5)
cutWater <- cutt2(training$Water,g=5)
cutWater <- cut2(training$Water,g=5)
cutSuperPlasticizer <- cut2(training$SuperPlasticizer,g=5)
cutCoarseAggregate <- cut2(training$CoarseAggregate,g=5)
cutFineAggregate <- cut2(training$FineAggregate,g=5)
qplot(CompressiveStrength,Age,colour=cutCement,data=training)
qplot(CompressiveStrength,Age,colour=cutWater,data=training)
qplot(CompressiveStrength,colour=cutWater,data=training,geom="density")
qplot(CompressiveStrength,colour=cutAge,data=training,geom="density")
qplot(CompressiveStrength,Age,data=training)
qplot(CompressiveStrength,Cement,colour=cutAge,data=training)
qplot(CompressiveStrength,Age,colour=cutAge,data=training)
qplot(CompressiveStrength,colour=cutFlyAsh,data=training)
qplot(CompressiveStrength,FlyAsh,colour=cutFlyAsh,data=training)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(data)
head(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
head(adData)
summary(adData)
testIndex = createDataPartition(diagnosis,p = 0.50,list=FALSE)
library(caret)
testIndex = createDataPartition(diagnosis,p = 0.50,list=FALSE)
str(adData)
str(testIndex)
summary(testIndex)
dim(testIndex)
training = adData[-testIndex]
testing  = adData[testIndex]
dim(training); dim(testing)
dim(training); dim(testing,)
testing  = adData[testIndex,]
training = adData[-testIndex,]
dim(training); dim(testing)
trainIndex = createDataPartition(diagnosis,p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training); dim(testing)
dim(adData)
data(concrete)
summary(data)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
dim(inTrain)
summary(inTrain)
str(inTrain)
dim(mixtures)
training = mixtures[inTrain,]
testing = mixtures[-inTrain]
dim(training)
dim(testing)
testing = mixtures[-inTrain,]
dim(testing)
plot(CompressiveStrength,pch=19)
summary(mixtures)
plot(CompressiveStrength,pch=19,data=training)
qplot(CompressiveStrength,pch=19,data=training)
qplot(CompressiveStrength,Cement,data=training)
qplot(CompressiveStrength,Cement,data=training,pch=19)
qplot(CompressiveStrength,Cement,data=training,pch=19)
qplot?
qplot()?
?qplot
plot(as.factor(CompressiveStrength),data=training,pch=19)
plot(as.factor(CompressiveStrength),data=mixtures,pch=19)
plot(as.factor(mixtures$CompressiveStrength),pch=19)
plot(as.factor(mixtures$CompressiveStrength))
library(Hmisc)
nsv <- nearZeroVar(training,saveMetrics = TRUE)
nsv
plot(as.factor(mixtures$CompressiveStrength))
qplot(as.factor(mixtures$CompressiveStrength))
cutAge <- cut2(training$Age,g=5)
table(cutAge)
cutCompressiveStrength <- cut2(training$CompressiveStrength,g=5)
table(cutCompressiveStrength)
pl <- qplot(cutCompressiveStrength,Age,data=training)
pl
pl <- qplot(CompressiveStrength,Age,data=training)
pl
pl <- qplot(cutCompressiveStrength,Age,data=training,fill=cutCompressiveStrength,geom=c("boxplot"))
pl
p2 <- qplot(cutCompressiveStrength,Age,data=training,fill=cutCompressiveStrength,geom=c("boxplot","jitter"))
p2
p2 <- qplot(cutCompressiveStrength,FlyAsh,data=training,fill=cutCompressiveStrength,geom=c("boxplot","jitter"))
p2
qplot(CompressiveStrength,data=training)
qplot(cutCompressiveStrength,data=training)
qplot(CompressiveStrength,Age,data=training)
qplot(CompressiveStrength,Age,color=FlyAsh,data=training)
qplot(cutCompressiveStrength,Age,color=FlyAsh,data=training)
qplot(cutCompressiveStrength,Age,color=FlyAsh,data=training,pch=19)
qplot(cutCompressiveStrength,Age,color=FlyAsh,data=training)
cutFlyAsh <- cut2(training$FlyAsh,g=5)
qplot(cutCompressiveStrength,Age,color=cutFlyAsh,data=training)
qplot(CompressiveStrength,Age,color=cutFlyAsh,data=training)
qplot(CompressiveStrength,color=cutFlyAsh,data=training,geom="density")
qplot(CompressiveStrength,color=cutAge,data=training,geom="density")
qplot(CompressiveStrength,color=cutAge,data=training,geom="density",size=2)
qplot(CompressiveStrength,color=cutAge,data=training,geom="density",size=1)
qplot(CompressiveStrength,data=training,geom="density",size=1)
qplot(CompressiveStrength,color=cutAge,data=training,geom="density",size=1)
qplot(CompressiveStrength,color=cutFlyAsh,data=training,geom="density",size=1)
qplot(CompressiveStrength,color=Cement,data=training,geom="density",size=1)
cutAge <- cut2(training$Cement,g=5)
qplot(CompressiveStrength,color=Cement,data=training,geom="density",size=1)
cutAge <- cut2(training$Age,g=5)
cutCement <- cut2(training$Cement,g=5)
qplot(CompressiveStrength,color=cutCement,data=training,geom="density",size=1)
cutWater <- cut2(training$Water,g=5)
qplot(CompressiveStrength,color=cutWater,data=training,geom="density",size=1)
cutCourseAggregate <- cut2(training$CoarseAggregate,g=5)
qplot(CompressiveStrength,color=cutCourseAggregate,data=training,geom="density",size=1)
cutFineAggregate <- cut2(training$FineAggregate,g=5)
qplot(CompressiveStrength,color=cutFineAggregate,data=training,geom="density",size=1)
qplot(CompressiveStrength,color=cutFineAggregate,data=training,geom="density",size=1)
qplot(cutCompressiveStrength,Age,data=training,fill=cutCompressiveStrength,geom=c("boxplot"))
qplot(cutCompressiveStrength,Age,data=training,fill=cutCompressiveStrength,geom=c("boxplot","jitter"))
qplot(cutCompressiveStrength,cutAge,data=training,fill=cutCompressiveStrength,geom=c("boxplot","jitter"))
qplot(cutCompressiveStrength,Age,data=training,fill=cutCompressiveStrength,geom=c("boxplot","jitter"))
<- abs(cor(training[,-9]))
M <- abs(cor(training[,-9]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
which(M > 0.2,arr.ind=T)
which(M > 0.7,arr.ind=T)
which(M > 0.6,arr.ind=T)
which(M > 0.5,arr.ind=T)
which(M > 0.4,arr.ind=T)
modelFit <-train(training$CompressiveStrength ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$CompressiveStrength,predict(modelFit,testing))
qplot(cutCompressiveStrength,Age,data=training,fill=cutCompressiveStrength,geom=c("boxplot","jitter"))
summary(training$CompressiveStrength)
summary(testing$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,color=cutAge)
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,training$Age)
plot(training$CompressiveStrength,color=training$Age)
plot()
plot(training$CompressiveStrength,col=training$Age)
plot(training$CompressiveStrength,col=training$cutAge)
plot(training$CompressiveStrength,col=cutAge)
plot(training$CompressiveStrength,col=cutCement)
plot(training$CompressiveStrength,col=cutCoarseAggregate)
plot(training$CompressiveStrength,col=cutFineAggregate)
plot(training$CompressiveStrength,col=cutCoarseAggregate)
plot(training$CompressiveStrength,col=cutWater)
plot(training$CompressiveStrength,col=cutFlyAsh)
plot(training$CompressiveStrength)
summary(training$Superplasticizer)
plot(training$Superplasticizer)
plot(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer + 1))
hist(training$Superplasticizer)
head(training$Superplasticizer)
min(training$Superplasticizer)
max(training$Superplasticizer)
ranage(training$Superplasticizer)
cutSuperPlastisizer <- cut2(training$Superplasticizer,g=10)
dim(cutSuperPlastisizer)
dim(cutSuperPlastisizer)
table(cutSuperPlastisizer)
plot(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
mean(training$Superplasticizer)
sd(training$Superplasticizer)
preObj <- preProcess(training[,-9],method=c("center","scale"))
trainSP <- predict(preObj,training[,-9])$SuperPlastisizer
mean(trainSP)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer + 1))
log(0)
log(1)
log(0.013)
log(1.1)
log(-0.3)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
summary(training)
dim(training)
nrows(training)
nrow(training)
nav <- nearZeroVar(training,saveMetrics = TRUE)
nav
M <- abs(cor(training))
abs()
abs()?
?abs
M <- abs(cor(training[,-1]))
summary(training)
preObj ,- preProcess(training[,-1],method=c("center","scale"))
preObj <- preProcess(training[,-1],method=c("center","scale"))
preProc <- preProcess(log10(training[,-1]+1),method = "pca",pcaComp = 12 )
preProc <- preProcess(training,method = "pca",pcaComp = 12 )
trainPC <- predict(preProc,training)
preProc <- preProcess(training[,-1],method = "pca",pcaComp = 12 )
trainPC <- predict(preProc,training[,-1])
modelFit <- train(training$diagnosis ~ .,method = "glm",data=trainPC)
modelFit <- train(training$diagnosis ~ IL_11,IL_13,method = "glm",data=trainPC)
modelFit <- train(training$diagnosis ~ training$IL_11,training$IL_13,method = "glm",data=trainPC)
modelFit <- train(training$diagnosis ~ training$IL_11,training$IL_13,method = "pca",data=trainPC)
modelFit <- train(training$diagnosis ~ training$IL_11,training$IL_13,method = "center",data=trainPC)
preProc <- preProcess(training[,-1],method = "pca",pcaComp = 12 )
trainPC <- predict(preProc,training[,-1])
dim(trainPC)
modelFit <- train(training$diagnosis ~ training$IL_11,training$IL_13,method = "center",data=trainPC)
training.names
names(training)
trainingIL <- training[,c(1,58:69)]
names(trainingIL)
preProc <- preprocess(trainingIL[,-1],method = "pca2",pcaComp = 5)
preProc <- preProcess(trainingIL[,-1],method = "pca2",pcaComp = 5)
preProc <- preProcess(trainingIL[,-1],method = "pca",pcaComp = 5)
trainPC <- predict(preProc,trainingIL[,-1])
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
install.packages("e1071")
library(e1071)
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preprocess(trainingIL[,-1],method = "pca2",pcaComp = 5)
preProc <- preprocess(trainingIL[,-1],method = "pca",pcaComp = 5)
trainPC <- predict(preProc,trainingIL[,-1])
preProc <- preprocess(trainingIL[,-1],method = "pca",pcaComp = 9)
preProc <- preProcess(trainingIL[,-1],method = "pca",pcaComp = 9)
trainPC <- predict(preProc,trainingIL[,-1])
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(trainingIL[,-1],method = "pca",pcaComp = 10)
trainPC <- predict(preProc,trainingIL[,-1])
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(trainingIL[,-1],method = "pca",pcaComp = 12)
trainPC <- predict(preProc,trainingIL[,-1])
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(log10(trainingIL[,-1]+1),method = "pca",pcaComp = 12)
preProc <- preProcess(trainingIL[,-1],method = "pca",pcaComp = 12)
confusionMatrix(training$diagnosis,predict(modelFit,testPC))
confusionMatrix(trainingIL$diagnosis,predict(modelFit,testPC))
testingIL <- testing[,c(1,58:69)]
preProc <- preProcess(trainingIL[,-1],method = "pca",pcaComp = 12)
trainPC <- predict(preProc,trainingIL[,-1])
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testingIL[,-1])
confusionMatrix(testingIL$diagnosis,predict(modelFit,testPC))
preProcess()?
preProcess()
?preprocess()
?preProcess()
modelFit
preProc <- preProcess(trainingIL[,-1],method = "pca",pcaComp = 5)
trainPC <- predict(preProc,trainingIL[,-1])
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
modelFit
dim adData
dim (adData)
dim(testing)
dim(training)
modelFit2 <- train(diagnosis ~ IL_11,IL_13,IL_16,IL_17E,IL_1alpha,data = trainingIL,method="glm")
modelFit2 <- train(diagnosis ~ IL_11,IL_13,IL_16,IL_17E,IL_1alpha,data = trainingIL,method="glm")
?train()
modelFit <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
modelFit$finalModel
preObj <- preProcess(trainingIL, method=c("center", "scale", "pca"), thresh=0.9)
preObj
preObj <- preProcess(trainingIL[,-1], method=c("center", "scale", "pca"), thresh=0.9)
prObj
preObj
preObj <- preProcess(trainingIL[,-1], method=c("center", "scale", "pca"), thresh=0.95)
preObj
preObj <- preProcess(trainingIL[,-1], method=c("center", "scale", "pca"), thresh=0.9)
names(preObj)
names(trainingIL)
non_pca_model <- train(diagnosis ~ ., data=trainingIL, method="glm")
non_pca_result <- confusionMatrix(testingIL$diagnosis, predict(non_pca_model, testingIL[, -1]))
non_pca_result
pc_training_obj <- preProcess(trainingIL[, -1], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_preds <- predict(pc_training_obj, trainingIL[, -1])
pc_testing_preds <- predict(pc_training_obj, testingIL[, -1])
pca_model <- train(trainingIL$diagnosis ~ ., data=pc_training_preds, method="glm")
pca_result <- confusionMatrix(testingIL$diagnosis, predict(pca_model, pc_testing_preds))
pca_result
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.7, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~.,method = "rpart",data=training)
print(modFit$finalModel)
install.packages("rattle")
library(rattle)
library(pgmm)
data(olive)
summary(olive)
nrow(olive)
olive = olive[,1]
summary(olive)
newdata = as.data.frame(t(colMeans(olive)))
library(caret)
model<-train(Area ~ ., data=olive, method="rpart")
model<-train(Area ~ ., method="rpart",data=olive)
data(olive)
model<-train(Area ~ ., method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
trainSA = SAheart[train,]
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
library(ElemStatLearn)
dat(vowel.train)
data(vowel.train)
data(vowel.test)
summary(vowel.test)
typeof(vowel.train$y)
library(Hmisc)
traincuty <- cut2(vowel.train$y,g=10)
testcuty <- cut2(vowel.test$y,g=10)
set.seed(33833)
ModFit <- train(y ~.,method="rpart",data=traincuty)
summary(traincuty)
vowel.train$y ,- factor(vowel.train$y)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
ModFit <- train(y ~.,method="rpart",data=vowel.train)
install.packages(e1071)
install.packages("e1071")
library(e1071)
ModFit <- train(y ~.,method="rpart",data=vowel.train)
ModFit <- train(y ~.,method="rf",data=vowel.train,prox=TRUE)
install.packages("randomForest")
library(randomForest)
ModFit <- train(y ~.,method="rf",data=vowel.train,prox=TRUE)
ModFit <- train(y ~.,method="rf",data=vowel.train,prox=TRUE,importance=TRUE)
varimp(ModFit)
varImp(ModFit)
vimp <- varImp(ModFit)
plot(vimp, top = 20)
plot(vimp, top = 10)
rownames(vimp)[order(vimp$Overall, decreasing=TRUE)]
install.packages("Rtools")
install.packages("rtools")
install.packages("shiny")
library(shiny)
shiny::runApp('G:/Data_Science/9_developing_Data_Products/Week4/App1')
shiny::runApp('G:/Data_Science/9_developing_Data_Products/Week4/App1')
shiny::runApp('G:/Data_Science/9_developing_Data_Products/Week4/App1')
shiny::runApp('G:/Data_Science/9_developing_Data_Products/Week4/App1')
shiny::runApp('G:/Data_Science/9_developing_Data_Products/Week4/App1')
shiny::runApp('G:/Data_Science/9_developing_Data_Products/Week4/App1')
library(shinyapps)
deployApp()
setwd("G:/Data_Science/9_developing_Data_Products/Week4/App1")
deployApp()
